/*    -*- Java -*- 
 * 
 *  Copyright 2007 Tail-F Systems AB. All rights reserved. 
 *
 *  This software is the confidential and proprietary 
 *  information of Tail-F Systems AB.
 *
 *  $Id$
 *
 */

import com.tailf.conf.*;
import com.tailf.dp.*;
import java.util.Iterator;

public class SimpleDataCb implements DpDataCallback {

    public String callpoint() {
	return "simplecp";
    }

    public int mask() {
	return M_ALL;
    }
    
    public Iterator iterator(DpTrans trans, ConfObject[] kp) throws DpCallbackException {
	return SimpleWithTrans.iterator();
    }
	

    public ConfKey getKey(DpTrans trans, ConfObject[] kp, Object obj) throws DpCallbackException {	
	trace("getKey()");
	Server s = (Server) obj;
	return new ConfKey( new ConfObject[] { new ConfBuf(s.name) });
    }	
    

    
    public ConfValue getElem(DpTrans trans, ConfObject[] kp) throws DpCallbackException {
	trace("getElem()");
	String name = ((ConfKey) kp[1]).elementAt(0).toString();
	Server s = SimpleWithTrans.findServer( name );
	if (s == null) return null; /* not found */
	
	/* switch on xml elem tag */
	ConfTag leaf = (ConfTag) kp[0];
	switch (leaf.tag) {
	case smp.smp_name: 
	    return new ConfBuf( s.name );
	case smp.smp_ip:
	    return new ConfIPv4( s.addr );
	case smp.smp_port:
	    return new ConfUInt16( s.port );
	case smp.smp_macaddr:
	    return new ConfHexList( s.macaddr );
	case smp.smp_snmpref:
	    return new ConfOID( s.snmpref );
	case smp.smp_prefixmask:
	    return new ConfOctetList( s.prefixmask ); 
	default: 
	    throw new DpCallbackException("xml tag not handled");
	}
    }

    
    
    public int setElem(DpTrans trans, ConfObject[] kp, ConfValue newval) throws DpCallbackException {
	trace("setElem()");
	return Conf.REPLY_ACCUMULATE;
    }
    
    public int create(DpTrans trans, ConfObject[] kp) throws DpCallbackException {
	trace("create()");
	return Conf.REPLY_ACCUMULATE;
    }
    
    public int remove(DpTrans trans, ConfObject[] kp) throws DpCallbackException {
	trace("remove()");	
	return Conf.REPLY_ACCUMULATE;
    }
    
    public int numInstances(DpTrans trans, ConfObject[] kp) throws DpCallbackException {
	trace("numInstances()");	
	return SimpleWithTrans.numServers();
    }
    
    
    public ConfValue[] getObject(DpTrans trans, ConfObject[] kp) throws DpCallbackException {
	trace("getObject()");	
	trace(kp);
	String name = ((ConfKey) kp[0]).elementAt(0).toString();
	Server s = SimpleWithTrans.findServer( name );
	if (s == null) return null; /* not found */	
	return new ConfValue[] {
	    new ConfBuf(s.name),
	    new ConfIPv4( s.addr),
	    new ConfUInt16( s.port),
	    new ConfHexList( s.macaddr ),
	    new ConfOID( s.snmpref ),
	    new ConfOctetList( s.prefixmask )};
    }
    
    public boolean existsOptional(DpTrans trans, ConfObject[] kp) throws DpCallbackException {
	trace("existsOptional()");	
	return false;
    }


    /**
     * trace
     */
    public void trace(String str) {
	System.err.println("*SimpleDataCb: "+str);
    }    

    private void trace(ConfObject[] kp) {
	String s= "";
	for (int i=0;i< kp.length; i++)
	    s= s + kp[i].toString() + "/" ;
	trace("kp = "+s);
    }

}